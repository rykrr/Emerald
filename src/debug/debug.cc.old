#include <iostream>
#include <fstream>
#include "debug.hh"
#include "../memory.hh"
#include "../macros.hh"
#include "../core/mappings.hh"

#define debug_lambda [&](u16 a, u16 b, u16 c, u16 d)

#define print_stream() {			\
	console_output.print(stream.str());	\
	console_output.scroll();				\
}

#define prints(s) {			\
	console_output.print(s);		\
	console_output.scroll();		\
}

#define printc(s) {			\
	console_input.clear();	\
	console_input.puts(s);	\
	console_input.render();	\
	console_input.display();\
}


Debugger::Debugger()
	:	window(((20 + 54 + 20) << 3), 50<<3, 1),
		tracer(window, 0, 0, 20, 50),
		console_output(window, (20<<3), 0, 54, 49),
		console_input(window.create_texture((20<<3), 49<<3, 54<<3, 1<<3)),
		info(window.create_texture(((20 + 54)<<3), 0, 20<<3, 50<<3)),
		info_enable(true), trace_enable(true), counter_enable(false), log_enable(false),
		active(true) {
	
	window.set_colour({32, 32, 32, 255});
	window.clear();
	
	tracer.clear();
	console_output.clear();
	
	info.set_colour({0, 0, 0, 255}, {255, 255, 255, 255});
	info.clear();
	
	console_input.set_colour({0, 0, 0, 255}, {255, 255, 255, 255});
	console_input.clear();

	render();
	
	keygen.keyup_subscribe([this](auto s) { this->keyup(s); });
	
	commands["peek"] = {
		debug_lambda {
			std::stringstream stream;
			stream << to_hex(memory[a].read_byte(), 2);
			print_stream();
		}, 1
	};
	
	commands["poke"] = {
		debug_lambda {
			memory.set_debug_mode(true);
			memory[a].write_byte(b);
			memory.set_debug_mode(false);
		}, 2
	};
	
	commands["exit"] = {
		debug_lambda {
			memory.set_debug_mode(true);
			memory[Registers::PC].write_byte(0x10);
			memory.set_debug_mode(false);
			active = false;
			throw std::runtime_error("Goodbye");
		}, 0
	};
	
	commands["jump"] = {
		debug_lambda {
			Registers::PC = a;
		}, 1
	};
	
	commands["view"] = {
		debug_lambda {
				
			std::stringstream stream;
			
			for (u16 i = 0; a + (i<<4) < b; i++) {
				
				c = a + (i<<4);
				
				stream << to_hex(c, 4);
				console_output.print("[" + stream.str() + "] ");
				stream.str("");
				stream.clear();
				
				for (u8 j = 0; c + j < b && j < 16; j++) {
					
					d = c+j;
					
					stream << to_hex(memory[c+j].read_byte(), 2);
					console_output.print(stream.str() + " ");
					stream.str("");
					stream.clear();
					
				}
				
				console_output.scroll();
			}
			
			
		}, 2
	};
	
	commands["brlist"] = {
		debug_lambda {
			
			std::stringstream stream;
			
			for_range (i, breakpoints.size()) {
				
				stream	<< to_hex(i, 2)
						<< ": " << to_hex(breakpoints[i], 4);
				print_stream();
				stream.str("");
				stream.clear();
			}
		}, 0
	};
	
	commands["bradd"] = {
		debug_lambda {
			breakpoints.push_back(a);
		}, 1
	};
	
	commands["brdel"] = {
		debug_lambda {
			if (breakpoints.size() <= a)
				return;
			breakpoints.erase(breakpoints.begin()+a);
		}, 1
	};
	
	commands["clear"] = {
		debug_lambda {
			console_output.clear();
		}, 0
	};
	
	commands["log"] = {
		debug_lambda {
			log_enable = a;
		}, 1
	};
	
	commands["dump"] = {
		debug_lambda {
			std::ofstream dump("/tmp/tracelog");
			
			for (uint64_t i = 0; i < log.size(); i++)
				dump << log[i] << '\n';
		}, 0
	};
}



void Debugger::keyup(SDL_Scancode s) {

	switch (s) {
		case SDL_SCANCODE_ESCAPE:
		case SDL_SCANCODE_F7:
			
			buffer = "";
			active = !active;
			
			break;
		
		case SDL_SCANCODE_F8:
			
			if (!active) break;
			
			active = false;
			counter_enable = true;
			counter = 1;
			break;
		
		case SDL_SCANCODE_F1:
			
			if (info_enable) {
				info.clear();
				info.set_cursor(1, 1);
				info.puts("info disabled.");
				info.render();
			}
			info_enable = !info_enable;
			
			if (trace_enable) {
				tracer.clear();
				tracer.clear();
				tracer.print("....");
				tracer.scroll();
			}
			trace_enable = !trace_enable;
			
			window.display();
			break;
		
		case SDL_SCANCODE_SPACE:
			
			if (!active) break;
			buffer += ' ';
			break;
			
		case SDL_SCANCODE_BACKSPACE:
			
			if (!active) break;
			
			if (buffer.length())
				buffer.pop_back();
			printc("> " + buffer);
			break;
			
		case SDL_SCANCODE_RETURN:
			
			if (!active) break;
			
			printc("> ");
			prints("> " + buffer);
			execute(buffer);
			
			buffer = "";
			break;
			
		default:
			
			if (!active) break;
			
			char c = static_cast<char>(SDL_GetKeyFromScancode(s));
			
			if (!('a' <= c && c <= 'z' || '0' <= c && c <= '9' || c == '-'))
				break;
			
			buffer += c;
			printc("> " + buffer);
			break;
			
	}
	
}

void Debugger::operator+=(u8 c) {
	
	keygen.poll();
	console_input.display();
	
	if (counter_enable) {
		
		counter--;
		
		if (!counter)
			active = true;
	}
	
	print_info();
	print_trace();
	
	if (!active) {
		
		for (u16 b : breakpoints) {
			if (Registers::PC == b) {
				std::stringstream stream;
				stream << "Breakpoint " << to_hex(Registers::PC, 4);
				print_stream();
				active = true;
			}
		}
		
	}

	if (!active) {
		printc("Running...");
		render();
		return;
	}
			
	printc("> ");
	
	while (active) {
		render();
		keygen.wait();
	}
	
}

void Debugger::execute(std::string s) {
	
	std::stringstream stream(s);
	std::string cmd;
	stream >> cmd;
	
	if (!cmd.length())
		return;
	
	auto cpos = commands.find(cmd);
	
	if (cpos == commands.end()) {
		prints("invalid command.");
		window.display();
		return;
	}
	
	Command command = commands[cmd];
	u16 args[4];
	
	for_range (i, 4) args[i] = 0;
	
	for_range (i, command.argc) {
		stream >> std::hex >> args[i];
		
		if (!stream) {
			prints("bad argument.");
			window.display();
			return;
		}
	}
	
	stream.str("");
	command.fn(args[0], args[1], args[2], args[3]);
	render();
	window.display();
}


void Debugger::print_trace() {
	
	using namespace Registers;

	static std::string opstr = "";
	static int cb = 0;
	
	if (log_enable)
		log.push_back(opstr);

	if (!trace_enable) {
		opstr = instruction_strings[cb][memory[PC].read_byte()];
		return;
	}
	
	tracer.print(opstr);
	tracer.scroll();
	
	opstr = instruction_strings[cb][memory[PC].read_byte()];
	
	std::stringstream ip;
	ip << to_hex(PC, 4);
	
	std::stringstream in;
	in << to_hex(memory[PC].read_byte(), 2);
	
	cb = (!cb && memory[PC].read_byte() == 0xCB);
	opstr = ip.str() + " " + in.str() + " " + opstr;
	
	if (opstr.find("xxxx") != opstr.npos) {
		std::stringstream hex;
		hex << to_hex(memory[PC+1].read_word(), 4);
		opstr.replace(opstr.find("xxxx"), 4, hex.str());
	}
	
	if (opstr.find("xx") != opstr.npos) {
		std::stringstream hex;
		hex << to_hex(memory[PC+1].read_byte(), 2);
		opstr.replace(opstr.find("xx"), 2, hex.str());
	}
}


void Debugger::print_info() {
	
	using namespace Registers;
	
	#define print_byte(x, y, label, data)		\
		info.set_cursor(x, y);					\
		info.puts(std::string(label) + "  ");	\
		info.putb(data);
	
	#define print_word(x, y, label, hi, lo)		\
		info.set_cursor(x, y);					\
		info.puts(std::string(label) + "  ");	\
		info.putb(hi); info.putb(lo);

	if (!info_enable) return;
	
	info.set_colour({0, 0, 0, 255}, {255, 255, 255, 255});
	info.clear();
	
	print_word(1,  1, "PC  ", PC >> 8, PC & 0xFF);
	print_word(1,  2, "SP  ", SP >> 8, SP & 0xFF);
	
	u16 tos = memory[SP].read_word();
	print_word(1,  3, "TOS ", tos >> 8, tos & 0xFF);
	
	print_word(1,  5, "AF  ", A, F);
	print_word(1,  6, "BC  ", B, C);
	print_word(1,  7, "DE  ", D, E);
	print_word(1,  8, "HL  ", H, L);
	
	print_byte(1, 10, "IF  ", memory[0xFF0F].read_byte());
	print_byte(1, 11, "IE  ", memory[0xFFFF].read_byte());
	
	print_byte(1, 14, "LCDC", memory[0xFF40].read_byte());
	print_byte(1, 15, "STAT", memory[0xFF41].read_byte());
	print_byte(1, 16, "SCY ", memory[0xFF42].read_byte());
	print_byte(1, 17, "SCX ", memory[0xFF43].read_byte());
	print_byte(1, 18, "LY  ", memory[0xFF44].read_byte());
}


void Debugger::render() {

	console_input.render();
	console_output.render();
	tracer.render();
	info.render();
}
